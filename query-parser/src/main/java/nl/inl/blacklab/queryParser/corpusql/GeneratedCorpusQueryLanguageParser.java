/* GeneratedCorpusQueryLanguageParser.java */
/* Generated By:JavaCC: Do not edit this line. GeneratedCorpusQueryLanguageParser.java */
package nl.inl.blacklab.queryParser.corpusql;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.tuple.Pair;

import nl.inl.blacklab.queryParser.corpusql.CorpusQueryLanguageParser.ChildRelationStruct;
import nl.inl.blacklab.search.indexmetadata.MatchSensitivity;
import nl.inl.blacklab.search.lucene.BLSpanQuery;
import nl.inl.blacklab.search.lucene.SpanQueryPositionFilter.Operation;
import nl.inl.blacklab.search.matchfilter.MatchFilter;
import nl.inl.blacklab.search.matchfilter.MatchFilterAnd;
import nl.inl.blacklab.search.matchfilter.MatchFilterCompare;
import nl.inl.blacklab.search.matchfilter.MatchFilterEquals;
import nl.inl.blacklab.search.matchfilter.MatchFilterFunctionCall;
import nl.inl.blacklab.search.matchfilter.MatchFilterImplication;
import nl.inl.blacklab.search.matchfilter.MatchFilterNot;
import nl.inl.blacklab.search.matchfilter.MatchFilterOr;
import nl.inl.blacklab.search.matchfilter.MatchFilterString;
import nl.inl.blacklab.search.matchfilter.MatchFilterTokenAnnotation;
import nl.inl.blacklab.search.textpattern.RelationOperatorInfo;
import nl.inl.blacklab.search.textpattern.TextPattern;
import nl.inl.blacklab.search.textpattern.TextPatternAnd;
import nl.inl.blacklab.search.textpattern.TextPatternAnyToken;
import nl.inl.blacklab.search.textpattern.TextPatternCaptureGroup;
import nl.inl.blacklab.search.textpattern.TextPatternConstrained;
import nl.inl.blacklab.search.textpattern.TextPatternDefaultValue;
import nl.inl.blacklab.search.textpattern.TextPatternEdge;
import nl.inl.blacklab.search.textpattern.TextPatternNot;
import nl.inl.blacklab.search.textpattern.TextPatternOr;
import nl.inl.blacklab.search.textpattern.TextPatternPositionFilter;
import nl.inl.blacklab.search.textpattern.TextPatternQueryFunction;
import nl.inl.blacklab.search.textpattern.TextPatternRepetition;
import nl.inl.blacklab.search.textpattern.TextPatternSequence;
import nl.inl.blacklab.search.textpattern.TextPatternSettings;
import nl.inl.blacklab.search.textpattern.TextPatternTags.Adjust;import nl.inl.blacklab.search.textpattern.TextPatternTerm;
import nl.inl.blacklab.search.textpattern.TextPatternTags;

@SuppressWarnings("all")

public class GeneratedCorpusQueryLanguageParser implements GeneratedCorpusQueryLanguageParserConstants {

    CorpusQueryLanguageParser wrapper;

// --- Grammar rules start here ---

/* a query */
  final public TextPattern query() throws ParseException {TextPattern a = null;
    a = settingsQuery();
    jj_consume_token(0);
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  final public TextPattern settingsQuery() throws ParseException {TextPattern a = null;
    Token settings = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SETTINGS_OP:{
      settings = jj_consume_token(SETTINGS_OP);
      a = settingsQuery();
// Parse settings operator (of the form "@a=b,c=d,e=f") into a map
        String keyValuesString = settings.toString().substring(1);
        Map<String, String> settingsMap = new LinkedHashMap<String, String>();
        for (String keyValue : keyValuesString.split(",")) {
            String[] keyAndValue = keyValue.split("=");
            if (keyAndValue.length != 2)
                {if (true) throw new IllegalArgumentException("Invalid settings string: " + keyValuesString);}
            settingsMap.put(keyAndValue[0], keyAndValue[1]);
        }
        {if ("" != null) return new TextPatternSettings(settingsMap, a);}
      break;
      }
    case DEFAULT_VALUE:
    case ROOT_DEP_OP:
    case NAME:
    case NUMBER:
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
    case LESS_THAN:
    case LPAREN:
    case NEGATE:
    case LBRACKET:{
      a = constrainedQuery();
{if ("" != null) return a;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TextPattern constrainedQuery() throws ParseException {TextPattern a = null;
    MatchFilter b = null;
    a = relationQuery();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTRAINT_THING:{
      jj_consume_token(CONSTRAINT_THING);
      b = constraint();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
if (b == null)
            {if ("" != null) return a;}
        {if ("" != null) return new TextPatternConstrained(a, b);}
    throw new Error("Missing return statement in function");
  }

  final public MatchFilter constraint() throws ParseException {MatchFilter a = null, c = null;
    Token b = null;
    a = simpleConstraint();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case OR:
    case ARROW_RIGHT:{
      b = booleanOperator();
      c = constraint();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
if (b == null)
            {if ("" != null) return a;}
        if (b.toString().equals("->"))
            {if ("" != null) return new MatchFilterImplication(a, c);}
        if (b.toString().equals("&"))
            {if ("" != null) return new MatchFilterAnd(a, c);}
        {if ("" != null) return new MatchFilterOr(a, c);}
    throw new Error("Missing return statement in function");
  }

  final public MatchFilter simpleConstraint() throws ParseException {MatchFilter v = null, w = null;
    Token b = null;
    v = constraintValue();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:
    case NOT_EQUALS:
    case GREATER_THAN_EQUALS:
    case LESS_THAN_EQUALS:
    case GREATER_THAN:
    case LESS_THAN:{
      b = comparisonOperator();
      w = constraintValue();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
if (b == null)
            {if ("" != null) return v;}
        switch (b.toString()) {
        case "=":
            {if ("" != null) return new MatchFilterEquals(v, w, MatchSensitivity.INSENSITIVE);}
            break;
        case "!=":
            {if ("" != null) return new MatchFilterNot(new MatchFilterEquals(v, w, MatchSensitivity.INSENSITIVE));}
            break;
        case ">=":
        case "<=":
        case ">":
        case "<":
            // (we could handle = and != here as well, but we already did that above - maybe in the future)
            {if ("" != null) return new MatchFilterCompare(v, w, MatchFilterCompare.Operator.fromSymbol(b.toString()), MatchSensitivity.INSENSITIVE);}
        default:
            {if (true) throw new UnsupportedOperationException("Unknown comparison operator: " + b.toString());}
        }
    throw new Error("Missing return statement in function");
  }

  final public Token comparisonOperator() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      t = jj_consume_token(EQUALS);
      break;
      }
    case NOT_EQUALS:{
      t = jj_consume_token(NOT_EQUALS);
      break;
      }
    case GREATER_THAN_EQUALS:{
      t = jj_consume_token(GREATER_THAN_EQUALS);
      break;
      }
    case LESS_THAN_EQUALS:{
      t = jj_consume_token(LESS_THAN_EQUALS);
      break;
      }
    case GREATER_THAN:{
      t = jj_consume_token(GREATER_THAN);
      break;
      }
    case LESS_THAN:{
      t = jj_consume_token(LESS_THAN);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public MatchFilter constraintValue() throws ParseException {MatchFilter v = null;
    String q = null;
    Token s = null;
    String l = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:{
      q = quotedString();
{if ("" != null) return new MatchFilterString(q);}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      v = constraint();
      jj_consume_token(RPAREN);
{if ("" != null) return v;}
      break;
      }
    case NEGATE:{
      jj_consume_token(NEGATE);
      v = constraintValue();
{if ("" != null) return new MatchFilterNot(v);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_1(2)) {
        s = jj_consume_token(NAME);
        jj_consume_token(LPAREN);
        l = captureLabel();
        jj_consume_token(RPAREN);
{if ("" != null) return new MatchFilterFunctionCall(s.toString(), l);}
      } else if (jj_2_2(2)) {
        l = captureLabel();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          s = jj_consume_token(NAME);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
{if ("" != null) return new MatchFilterTokenAnnotation(l, s == null ? null : s.toString());}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TextPattern relationQuery() throws ParseException {TextPattern parent = null;
    ChildRelationStruct childRel = null;
    List<ChildRelationStruct> childRels = new ArrayList<ChildRelationStruct>();
    String relType = null;
    if (jj_2_5(3)) {
      parent = complexQuery();
      if (jj_2_4(3)) {
        childRel = childRelation();
childRels.add(childRel);
        label_1:
        while (true) {
          if (jj_2_3(2147483647)) {
            ;
          } else {
            break label_1;
          }
          jj_consume_token(DELIMITER);
          childRel = childRelation();
childRels.add(childRel);
        }
      } else {
        ;
      }
if (childRels.isEmpty())
            {if ("" != null) return parent;}
        {if ("" != null) return wrapper.relationQuery(parent, childRels);}
    } else if (jj_2_6(3)) {
      parent = rootRelationType();
{if ("" != null) return parent;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ChildRelationStruct childRelation() throws ParseException {RelationOperatorInfo relType = null;
    TextPattern target = null;
    String label = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME:
    case NUMBER:{
      label = captureLabel();
      jj_consume_token(COLON);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    relType = relationType();
    target = relationQuery();
{if ("" != null) return new ChildRelationStruct(relType, target, label);}
    throw new Error("Missing return statement in function");
  }

  final public RelationOperatorInfo relationType() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEP_OP:{
      t = jj_consume_token(DEP_OP);
      break;
      }
    case ALIGNMENT_OP:{
      t = jj_consume_token(ALIGNMENT_OP);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return RelationOperatorInfo.fromOperator(t.toString());}
    throw new Error("Missing return statement in function");
  }

  final public TextPattern rootRelationType() throws ParseException {Token t = null;
    TextPattern target = null;
    String label = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME:
    case NUMBER:{
      label = captureLabel();
      jj_consume_token(COLON);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    t = jj_consume_token(ROOT_DEP_OP);
    target = relationQuery();
RelationOperatorInfo relType = RelationOperatorInfo.fromOperator(t.toString());
        {if ("" != null) return wrapper.rootRelationQuery(new ChildRelationStruct(relType, target, label));}
    throw new Error("Missing return statement in function");
  }

/* a start or self-closing tag tag such as <s> or <s/> (for finding XML elements).
 * Note that it returns one TextPattern, but if it's in [0] that means it's a start
 * tag; if it's in [1] it's a self-closing tag.
 */
  final public TextPattern tag() throws ParseException {Token tagName, endTagSlash = null, selfCloseSlash = null;
    Map<String, String> attr = new HashMap<String, String>();
    jj_consume_token(LESS_THAN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORWARD_SLASH:{
      endTagSlash = jj_consume_token(FORWARD_SLASH);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    tagName = jj_consume_token(NAME);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      attributes(attr);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORWARD_SLASH:{
      selfCloseSlash = jj_consume_token(FORWARD_SLASH);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(GREATER_THAN);
if (endTagSlash != null && selfCloseSlash != null) {
            {if (true) throw new MalformedTagException();}
        }
        TextPatternTags.Adjust adjust;
        if (selfCloseSlash != null)
            adjust = Adjust.FULL_TAG;
        else
            adjust = Adjust.LEADING_EDGE;
        if (endTagSlash != null)
            adjust = Adjust.TRAILING_EDGE;
        {if ("" != null) return new TextPatternTags(tagName.toString(), attr, adjust, "");}
    throw new Error("Missing return statement in function");
  }

  final public String quotedString() throws ParseException {Token a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTED_STRING:{
      a = jj_consume_token(QUOTED_STRING);
      break;
      }
    case SINGLE_QUOTED_STRING:{
      a = jj_consume_token(SINGLE_QUOTED_STRING);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return wrapper.getStringBetweenQuotes(a.toString());}
    throw new Error("Missing return statement in function");
  }

  final public void attributes(Map<String, String> attr) throws ParseException {Token name;
    String value;
    name = jj_consume_token(NAME);
    jj_consume_token(EQUALS);
    value = quotedString();
attr.put(name.toString(), value);
  }

/* a repetition specifier */
  final public Integer[] repetitionAmount() throws ParseException {Token t = null, t2 = null;
    Integer[] minMax = new Integer[2];
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:{
      jj_consume_token(MULT);
minMax[0] = 0; minMax[1] = BLSpanQuery.MAX_UNLIMITED; {if ("" != null) return minMax;}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
minMax[0] = 1; minMax[1] = BLSpanQuery.MAX_UNLIMITED; {if ("" != null) return minMax;}
      break;
      }
    case QUESTION:{
      jj_consume_token(QUESTION);
minMax[0] = 0; minMax[1] = 1; {if ("" != null) return minMax;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_7(3)) {
        jj_consume_token(LBRACE);
        t = jj_consume_token(NUMBER);
        jj_consume_token(RBRACE);
minMax[0] = minMax[1] = wrapper.num(t); {if ("" != null) return minMax;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:{
          jj_consume_token(LBRACE);
          t = jj_consume_token(NUMBER);
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NUMBER:{
            t2 = jj_consume_token(NUMBER);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          jj_consume_token(RBRACE);
minMax[0] = wrapper.num(t);
        if (t2 == null)
            minMax[1] = BLSpanQuery.MAX_UNLIMITED;
        else
            minMax[1] = wrapper.num(t2);
        {if ("" != null) return minMax;}
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TextPattern complexQuery() throws ParseException {TextPattern a = null, b = null;
    Token op = null;
    Operation oper = Operation.CONTAINING;
    a = simpleQuery();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHIN:
    case CONTAINING:{
      op = queryOperator();
      b = complexQuery();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
if (op == null)
            {if ("" != null) return a;}
        if (op.toString().equals("within")) {
            // a within b
            oper = Operation.WITHIN;
        }

        {if ("" != null) return new TextPatternPositionFilter(a, b, oper);}
    throw new Error("Missing return statement in function");
  }

  final public Token queryOperator() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHIN:{
      t = jj_consume_token(WITHIN);
      break;
      }
    case CONTAINING:{
      t = jj_consume_token(CONTAINING);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

/* a simple query (not including containing, within, etc.) */
  final public TextPattern simpleQuery() throws ParseException {TextPattern query = null, rest = null;
    Token b = null;
    query = sequence();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case OR:
    case ARROW_RIGHT:{
      b = booleanOperator();
      rest = simpleQuery();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
if (b == null)
            {if ("" != null) return query;}
        if (b.toString().equals("->"))
            {if (true) throw new UnsupportedOperationException("Implication operator only supported within global constraints");}
        if (b.toString().equals("&"))
            {if ("" != null) return new TextPatternAnd(query, rest);}
        {if ("" != null) return new TextPatternOr(query, rest);}
    throw new Error("Missing return statement in function");
  }

/* boolean operator: and, or or implication */
  final public Token booleanOperator() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      t = jj_consume_token(AND);
      break;
      }
    case OR:{
      t = jj_consume_token(OR);
      break;
      }
    case ARROW_RIGHT:{
      t = jj_consume_token(ARROW_RIGHT);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

/* a sequence of token constraints */
  final public TextPattern sequence() throws ParseException {TextPattern query = null;
    TextPattern following = null;
    query = captureQuery();
    if (jj_2_8(3)) {
      following = sequence();
query = new TextPatternSequence(query, following);
    } else {
      ;
    }
{if ("" != null) return query;}
    throw new Error("Missing return statement in function");
  }

/* sequence part: one part in a sequence, possibly with a repetition operator */
  final public TextPattern captureQuery() throws ParseException {TextPattern m = null;
    String label = null;
    if (jj_2_9(2)) {
      m = sequencePartNoCapture();
{if ("" != null) return m;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:
      case NUMBER:{
        label = captureLabel();
        jj_consume_token(COLON);
        m = sequencePartNoCapture();
{if ("" != null) return TextPatternCaptureGroup.get(m, label);}
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* sequence part: one part in a sequence, possibly with a repetition operator */
  final public TextPattern sequencePartNoCapture() throws ParseException {TextPattern m = null;
    Integer[] rep = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_VALUE:
    case NAME:
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
    case LESS_THAN:
    case LPAREN:
    case LBRACKET:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESS_THAN:{
        m = tag();
        break;
        }
      case DEFAULT_VALUE:
      case QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
      case LBRACKET:{
        m = position();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        m = constrainedQuery();
        jj_consume_token(RPAREN);
        break;
        }
      case NAME:{
        m = queryFunctionCall();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_10(6)) {
        rep = repetitionAmount();
      } else {
        ;
      }
if (rep != null)
        {
            if (m instanceof TextPatternAnyToken)
            {
                TextPatternAnyToken any = (TextPatternAnyToken)m;
                m = any.repeat(rep[0], rep[1]);
            } else
                m = TextPatternRepetition.get(m, rep[0], rep[1]);
        }
        {if ("" != null) return m;}
      break;
      }
    case NEGATE:{
      jj_consume_token(NEGATE);
      m = sequencePartNoCapture();
{if ("" != null) return new TextPatternNot(m);}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TextPattern queryFunctionCall() throws ParseException {Token func = null;
    List<Object> queryFuncParamList = Collections.emptyList();
    func = jj_consume_token(NAME);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_VALUE:
    case ROOT_DEP_OP:
    case NAME:
    case NUMBER:
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
    case LESS_THAN:
    case LPAREN:
    case NEGATE:
    case LBRACKET:{
      queryFuncParamList = commaSeparatedParamList();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
String funcName = func.toString();
        /*if (!funcName.startsWith("_")) {
            throw new UnsupportedOperationException("Query functions are a BlackLab-specific extension to Corpus Query Language and, to avoid future problems, must start with '_' !");
        }*/
        {if ("" != null) return new TextPatternQueryFunction(funcName, queryFuncParamList);}
    throw new Error("Missing return statement in function");
  }

  final public List<Object> commaSeparatedParamList() throws ParseException {Object q = null;
    List<Object> p = new ArrayList<Object>();
    q = functionParam();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      p = commaSeparatedParamList();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
p.add(0, q);
        {if ("" != null) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Object functionParam() throws ParseException {Object q;
    q = constrainedQuery();
{if ("" != null) return q;} /* this covers both actual queries and plain old strings */
    throw new Error("Missing return statement in function");
  }

  final public String captureLabel() throws ParseException {Token l = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME:{
      l = jj_consume_token(NAME);
      break;
      }
    case NUMBER:{
      l = jj_consume_token(NUMBER);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return l.toString();}
    throw new Error("Missing return statement in function");
  }

/* position: a simple attribute value or complex attribute expression between square brackets */
  final public TextPattern position() throws ParseException {TextPattern m = null;
    String f = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:{
      m = positionWord();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLAGS:{
        f = flags();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
{if ("" != null) return m;}
      break;
      }
    case DEFAULT_VALUE:{
      jj_consume_token(DEFAULT_VALUE);
{if ("" != null) return TextPatternDefaultValue.get();}
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:
      case LPAREN:
      case NEGATE:{
        m = positionLong();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
if (m == null)
            {if ("" != null) return new TextPatternAnyToken(1, 1);}
        {if ("" != null) return m;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String flags() throws ParseException {Token f;
    f = jj_consume_token(FLAGS);
{if ("" != null) return f.toString().substring(1);}
    throw new Error("Missing return statement in function");
  }

/* position word: no brackets, just a single token constraint for the default attribute (usually word form) */
  final public TextPattern positionWord() throws ParseException {String t = null;
    t = quotedString();
{if ("" != null) return wrapper.simplePattern(t);}
    throw new Error("Missing return statement in function");
  }

/* expression inside square brackets: an attribute clause, or multiple
   attribute clauses combined with boolean operators */
  final public TextPattern positionLong() throws ParseException {TextPattern a = null, c = null;
    Token b = null;
    a = positionLongPart();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case OR:
    case ARROW_RIGHT:{
      b = booleanOperator();
      c = positionLong();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
if (b == null)
            {if ("" != null) return a;}
        if (b.toString().equals("->"))
            {if (true) throw new UnsupportedOperationException("Implication operator only supported within global constraints");}
        if (b.toString().equals("&"))
            {if ("" != null) return new TextPatternAnd(a, c);}
        {if ("" != null) return new TextPatternOr(a, c);}
    throw new Error("Missing return statement in function");
  }

/* attribute clause: an attribute/value pair, attribute expression between parens, or a negated attribute/value pair */
  final public TextPattern positionLongPart() throws ParseException {TextPattern m = null;
    if (jj_2_11(3)) {
      m = attValuePair();
{if ("" != null) return m;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        m = positionLong();
        jj_consume_token(RPAREN);
{if ("" != null) return m;}
        break;
        }
      case NEGATE:{
        jj_consume_token(NEGATE);
        m = positionLongPart();
{if ("" != null) return new TextPatternNot(m);}
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* attribute/value pair, with equals or not equals sign, or possibly just a value (default attribute) */
  final public TextPattern attValuePair() throws ParseException {TextPatternTerm v = null;
    String annot;
    String f = null;
    if (jj_2_12(2)) {
      annot = annotName();
      jj_consume_token(EQUALS);
      v = valuePart();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLAGS:{
        f = flags();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
{if ("" != null) return wrapper.annotationClause(annot, v);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        annot = annotName();
        jj_consume_token(NOT_EQUALS);
        v = valuePart();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FLAGS:{
          f = flags();
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
        }
{if ("" != null) return new TextPatternNot(wrapper.annotationClause(annot, v));}
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String annotName() throws ParseException {Token t = null, subAnnot = null;
    t = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORWARD_SLASH:{
      jj_consume_token(FORWARD_SLASH);
      subAnnot = jj_consume_token(NAME);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
String annotName = t.toString();
        if (subAnnot == null)
            {if ("" != null) return annotName;}
        {if ("" != null) return annotName + "/" + subAnnot.toString();}
    throw new Error("Missing return statement in function");
  }

/* value expression: a value or multiple values combined with boolean operators */
/*   UNDOCUMENTED AND NONSTANDARD, REMOVE  (e.g. [word=("word"|"other")], use [word="word|other"] or [word="word" | word="other"])
TextPattern value():
{
    TextPattern a = null, c = null;
    Token b = null;
}
{
    LOOKAHEAD(3) a=valuePart() b=booleanOperator() c=value()
    {
        if (b.toString().equals("->"))
            throw new UnsupportedOperationException("Implication operator only supported within global constraints");
        if (b.toString().equals("&"))
            return new TextPatternAnd(a, c);
        return new TextPatternOr(a, c);
    }
|   a=valuePart()                   { return a; }
}
*/

/* value: a quoted string or a value expression between parentheses */
  final public TextPatternTerm valuePart() throws ParseException {TextPatternTerm m = null;
    String t = null;
    t = quotedString();
{if ("" != null) return wrapper.simplePattern(t);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(ROOT_DEP_OP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(NEGATE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_5()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(FORWARD_SLASH)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_4()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_13()) return true;
    if (jj_scan_token(NOT_EQUALS)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_13()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(NEGATE)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_30()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(FLAGS)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(CONSTRAINT_THING)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(DEFAULT_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GeneratedCorpusQueryLanguageParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1607a600,0x80000,0x0,0x3f00000,0x3f00000,0x20000000,0x14060000,0xa000,0x1800,0xa000,0x0,0x2000,0x0,0x60000,0x8000,0x0,0x0,0x180,0x180,0x0,0x0,0xa000,0x6062200,0x16062200,0x1606a600,0x40000000,0xa000,0x4000,0x14002000,0x60200,0x0,0x14000000,0x4000,0x4000,0x2000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x0,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x38,0x40,0x0,0x0,0x700,0x700,0x0,0x800,0x800,0x800,0x0,0x0,0x0,0x0,0x800,0x700,0x0,0x0,0x0,0x0,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GeneratedCorpusQueryLanguageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GeneratedCorpusQueryLanguageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GeneratedCorpusQueryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GeneratedCorpusQueryLanguageParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new GeneratedCorpusQueryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new GeneratedCorpusQueryLanguageParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GeneratedCorpusQueryLanguageParser(GeneratedCorpusQueryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GeneratedCorpusQueryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
