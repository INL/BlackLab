/*

Corpus Query Language (CQL) parser definition.

javacc is used to generate Java code from this parser definition.

*/

options 
{
    STATIC=false;
    JAVA_UNICODE_ESCAPE=true;
    //USER_CHAR_STREAM=true;
}

PARSER_BEGIN(GeneratedCorpusQueryLanguageParser)

package nl.inl.blacklab.queryParser.corpusql;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.tuple.Pair;

import nl.inl.blacklab.queryParser.corpusql.CorpusQueryLanguageParser.ChildRelationStruct;
import nl.inl.blacklab.queryParser.corpusql.CorpusQueryLanguageParser.RelationOperatorInfo;
import nl.inl.blacklab.search.indexmetadata.MatchSensitivity;
import nl.inl.blacklab.search.lucene.BLSpanQuery;
import nl.inl.blacklab.search.lucene.SpanQueryPositionFilter.Operation;
import nl.inl.blacklab.search.matchfilter.MatchFilter;
import nl.inl.blacklab.search.matchfilter.MatchFilterAnd;
import nl.inl.blacklab.search.matchfilter.MatchFilterCompare;
import nl.inl.blacklab.search.matchfilter.MatchFilterEquals;
import nl.inl.blacklab.search.matchfilter.MatchFilterFunctionCall;
import nl.inl.blacklab.search.matchfilter.MatchFilterImplication;
import nl.inl.blacklab.search.matchfilter.MatchFilterNot;
import nl.inl.blacklab.search.matchfilter.MatchFilterOr;
import nl.inl.blacklab.search.matchfilter.MatchFilterString;
import nl.inl.blacklab.search.matchfilter.MatchFilterTokenAnnotation;
import nl.inl.blacklab.search.textpattern.TextPattern;
import nl.inl.blacklab.search.textpattern.TextPatternAnd;
import nl.inl.blacklab.search.textpattern.TextPatternAnyToken;
import nl.inl.blacklab.search.textpattern.TextPatternCaptureGroup;
import nl.inl.blacklab.search.textpattern.TextPatternConstrained;
import nl.inl.blacklab.search.textpattern.TextPatternDefaultValue;
import nl.inl.blacklab.search.textpattern.TextPatternEdge;
import nl.inl.blacklab.search.textpattern.TextPatternNot;
import nl.inl.blacklab.search.textpattern.TextPatternOr;
import nl.inl.blacklab.search.textpattern.TextPatternPositionFilter;
import nl.inl.blacklab.search.textpattern.TextPatternQueryFunction;
import nl.inl.blacklab.search.textpattern.TextPatternRepetition;
import nl.inl.blacklab.search.textpattern.TextPatternSequence;
import nl.inl.blacklab.search.textpattern.TextPatternSettings;
import nl.inl.blacklab.search.textpattern.TextPatternTags.Adjust;import nl.inl.blacklab.search.textpattern.TextPatternTerm;
import nl.inl.blacklab.search.textpattern.TextPatternTags;

@SuppressWarnings("all")

public class GeneratedCorpusQueryLanguageParser {

    CorpusQueryLanguageParser wrapper;

}

PARSER_END(GeneratedCorpusQueryLanguageParser)

// Skip whitespace and comment
SKIP:
{
    " "
|   "\t"
|   "\n"
|   "\r"
}

/* Comments are 'special tokens': they are not reported, but are available
   for use by the next reported token */
SPECIAL_TOKEN:
{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
|   <MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/"])* "*/">
}

// Token definitions
TOKEN [IGNORE_CASE]:
{
    <WITHIN: "within" >
|   <CONTAINING: "containing" >
|   <DEFAULT_VALUE: "_">
    /* valid are e.g. --> -root-> -.*-> -a-b-> (and same preceded by ^ or !) */
|   <ROOT_DEP_OP: (["A"-"Z","a"-"z","_","0"-"9"])* "^-" ( ~["-"] (~["-"] | "-" ~[">"] )* )? "->" (["A"-"Z","a"-"z","_","0"-"9"])* >
|   <DEP_OP: ("!")? (["A"-"Z","a"-"z","_","0"-"9"])* "-" ( ~["-"] (~["-"] | "-" ~[">"] )* )? "->" (["A"-"Z","a"-"z","_","0"-"9"])* >
|   <ALIGNMENT_OP: (["A"-"Z","a"-"z","_","0"-"9"])* "=" ( ~["="] (~["="] | "=" ~[">"] )* )? "=>" (["A"-"Z","a"-"z","_","0"-"9"])* >
|   <NAME: ["A"-"Z","a"-"z","_"] (["A"-"Z","a"-"z","_","-","0"-"9"])* >
|   <FLAGS: "%" (["c", "C", "d", "D", "l", "L"])+ >
|   <NUMBER: (["0"-"9"])+ >
|   <SETTINGS_OP: "@" (["A"-"Z","a"-"z","_","0"-"9"])+ "=" (["A"-"Z","a"-"z","_","0"-"9"])+
                ( "," (["A"-"Z","a"-"z","_","0"-"9"])+ "=" (["A"-"Z","a"-"z","_","0"-"9"])+ )* >
|   <QUOTED_STRING: "\"" (~["\"","\\"] | "\\" ~[] )* "\"" >
|   <SINGLE_QUOTED_STRING: "'" (~["'","\\"] | "\\" ~[] )* "'" >
}

// --- Grammar rules start here ---

/* a query */
TextPattern query():
{
    TextPattern a = null;
}
{
    a=settingsQuery() <EOF>
    {
        return a;
    }
}

TextPattern settingsQuery():
{
    TextPattern a = null;
    Token settings = null;
}
{
    settings=<SETTINGS_OP> a=settingsQuery()
    {
        // Parse settings operator (of the form "@a=b,c=d,e=f") into a map
        String keyValuesString = settings.toString().substring(1);
        Map<String, String> settingsMap = new LinkedHashMap<String, String>();
        for (String keyValue : keyValuesString.split(",")) {
            String[] keyAndValue = keyValue.split("=");
            if (keyAndValue.length != 2)
                throw new IllegalArgumentException("Invalid settings string: " + keyValuesString);
            settingsMap.put(keyAndValue[0], keyAndValue[1]);
        }
        return new TextPatternSettings(settingsMap, a);
    }
|   a=constrainedQuery()
    {
        return a;
    }
}

TextPattern constrainedQuery():
{
    TextPattern a = null;
    MatchFilter b = null;
}
{
    a=complexQuery() [ "::" b=constraint() ]
    {
        if (b == null)
            return a;
        return new TextPatternConstrained(a, b);
    }
}

MatchFilter constraint():
{
    MatchFilter a = null, c = null;
    Token b = null;
}
{
    a=simpleConstraint() [ b=booleanOperator() c=constraint() ]
    {
        if (b == null)
            return a;
        if (b.toString().equals("->"))
            return new MatchFilterImplication(a, c);
        if (b.toString().equals("&"))
            return new MatchFilterAnd(a, c);
        return new MatchFilterOr(a, c);
    }
}

MatchFilter simpleConstraint():
{
    MatchFilter v = null, w = null;
    Token b = null;
}
{
    v=constraintValue() [ b=comparisonOperator() w=constraintValue() ]
    {
        if (b == null)
            return v;
        switch (b.toString()) {
        case "=":
            return new MatchFilterEquals(v, w, MatchSensitivity.INSENSITIVE);
            break;
        case "!=":
            return new MatchFilterNot(new MatchFilterEquals(v, w, MatchSensitivity.INSENSITIVE));
            break;
        case ">=":
        case "<=":
        case ">":
        case "<":
            // (we could handle = and != here as well, but we already did that above - maybe in the future)
            return new MatchFilterCompare(v, w, MatchFilterCompare.Operator.fromSymbol(b.toString()), MatchSensitivity.INSENSITIVE);
        default:
            throw new UnsupportedOperationException("Unknown comparison operator: " + b.toString());
        }
    }
}

Token comparisonOperator():
{
    Token t = null;
}
{
    (t="=" | t="!=" | t=">=" | t="<=" | t=">" | t="<")  { return t; }
}

MatchFilter constraintValue():
{
    MatchFilter v = null;
    String q = null;
    Token s = null;
    String l = null;
}
{
    q=quotedString()                    { return new MatchFilterString(q); }
|   "(" v=constraint() ")"              { return v; }
|   "!" v=constraintValue()             { return new MatchFilterNot(v); }
|   LOOKAHEAD(2)
    s=<NAME> "(" l=captureLabel() ")"   { return new MatchFilterFunctionCall(s.toString(), l); }
|   LOOKAHEAD(2)
    l=captureLabel() [ "." s=<NAME> ]
    {
        return new MatchFilterTokenAnnotation(l, s == null ? null : s.toString());
    }
}

TextPattern complexQuery():
{
    TextPattern a = null, b = null;
    Token op = null;
    Operation oper = Operation.CONTAINING;
}
{
    a=simpleQuery() [ op=queryOperator() b=complexQuery() ]
    {
        if (op == null)
            return a;
        if (op.toString().equals("within")) {
            // a within b
            oper = Operation.WITHIN;
        }

        return new TextPatternPositionFilter(a, b, oper);
    }
}

Token queryOperator():
{
    Token t = null;
}
{
    (t=<WITHIN> | t=<CONTAINING>)
    {
        return t;
    }
}

/* a simple query (not including containing, within, etc.) */
TextPattern simpleQuery():
{
    TextPattern query = null, rest = null;
    Token b = null;
}
{
    query=sequence() [ b=booleanOperator() rest=simpleQuery() ]
    {
        if (b == null)
            return query;
        if (b.toString().equals("->"))
            throw new UnsupportedOperationException("Implication operator only supported within global constraints");
        if (b.toString().equals("&"))
            return new TextPatternAnd(query, rest);
        return new TextPatternOr(query, rest);
    }
}

/* a sequence of token constraints */
TextPattern sequence():
{
    TextPattern query = null;
    TextPattern following = null;
}
{
    query=relationQuery() [ LOOKAHEAD(2) following=sequence() { query = new TextPatternSequence(query, following); } ]
    {
        return query;
    }
}


TextPattern relationQuery():
{
    TextPattern parent = null;
    ChildRelationStruct childRel = null;
    List<ChildRelationStruct> childRels = new ArrayList<ChildRelationStruct>();
    String relType = null;
}
{   LOOKAHEAD(3)
    parent=captureQuery()
    [
        LOOKAHEAD(3)
        childRel=childRelation()                        { childRels.add(childRel); }
        /* LOOKAHEAD( ";" ) suppresses dangling-else problem */
        ( LOOKAHEAD( ";" ) ";" childRel=childRelation() { childRels.add(childRel); } )*
    ]
    {
        if (childRels.isEmpty())
            return parent;
        return wrapper.relationQuery(parent, childRels);
    }
|   parent=rootRelationType()
    {
        return parent;
    }
}

ChildRelationStruct childRelation():
{
    RelationOperatorInfo relType = null;
    TextPattern target = null;
    String label = "";
}
{
    [ label=captureLabel() ":" ]
    relType=relationType() target=relationQuery()
    {
        return new ChildRelationStruct(relType, target, label);
    }
}

RelationOperatorInfo relationType():
{
    Token t = null;
}
{
    (t=<DEP_OP> | t=<ALIGNMENT_OP>)
    {
        return RelationOperatorInfo.fromOperator(t.toString());
    }
}

TextPattern rootRelationType():
{
    Token t = null;
    TextPattern target = null;
    String label = "";
}
{
    [ label=captureLabel() ":" ]
    t=<ROOT_DEP_OP> target=relationQuery()
    {
        RelationOperatorInfo relType = RelationOperatorInfo.fromOperator(t.toString().substring(1));
        return wrapper.rootRelationQuery(new ChildRelationStruct(relType, target, label));
    }
}


/* a start or self-closing tag tag such as <s> or <s/> (for finding XML elements).
 * Note that it returns one TextPattern, but if it's in [0] that means it's a start
 * tag; if it's in [1] it's a self-closing tag.
 */
TextPattern tag():
{
    Token tagName, endTagSlash = null, selfCloseSlash = null;
    Map<String, String> attr = new HashMap<String, String>();
}
{
    "<" (endTagSlash="/")? tagName=<NAME> ( attributes(attr) )* (selfCloseSlash="/")? ">"
    {
        if (endTagSlash != null && selfCloseSlash != null) {
            throw new MalformedTagException();
        }
        TextPatternTags.Adjust adjust;
        if (selfCloseSlash != null)
            adjust = Adjust.FULL_TAG;
        else
            adjust = Adjust.LEADING_EDGE;
        if (endTagSlash != null)
            adjust = Adjust.TRAILING_EDGE;
        return new TextPatternTags(tagName.toString(), attr, adjust, "");
    }
}

String quotedString():
{
    Token a;
}
{
    (a=<QUOTED_STRING> | a=<SINGLE_QUOTED_STRING>)
    {
        return wrapper.getStringBetweenQuotes(a.toString());
    }
}

void attributes(Map<String, String> attr):
{
    Token name;
    String value;
}
{
    name=<NAME> "=" value=quotedString()
    {
        attr.put(name.toString(), value);
    }
}

/* a repetition specifier */
Integer[] repetitionAmount():
{
    Token t = null, t2 = null;
    Integer[] minMax = new Integer[2];
}
{
    "*"                                 { minMax[0] = 0; minMax[1] = BLSpanQuery.MAX_UNLIMITED; return minMax; }
|   "+"                                 { minMax[0] = 1; minMax[1] = BLSpanQuery.MAX_UNLIMITED; return minMax; }
|   "?"                                 { minMax[0] = 0; minMax[1] = 1; return minMax; }
|   LOOKAHEAD(3) "{" t=<NUMBER> "}"     { minMax[0] = minMax[1] = wrapper.num(t); return minMax; }
|   "{" t=<NUMBER> "," [ t2=<NUMBER> ] "}"
    {
        minMax[0] = wrapper.num(t);
        if (t2 == null)
            minMax[1] = BLSpanQuery.MAX_UNLIMITED;
        else
            minMax[1] = wrapper.num(t2);
        return minMax;
    }
}

/* boolean operator: and, or or implication */
Token booleanOperator():
{
    Token t = null;
}
{
    (t="&" | t="|" | t="->")  { return t; }
}

/* sequence part: one part in a sequence, possibly with a repetition operator */
TextPattern captureQuery():
{
    TextPattern m = null;
    String label = null;
}
{
    LOOKAHEAD(2)
    m=sequencePartNoCapture()    { return m; }
|   label=captureLabel() ":" m=sequencePartNoCapture()    { return TextPatternCaptureGroup.get(m, label); }
}


/* sequence part: one part in a sequence, possibly with a repetition operator */
TextPattern sequencePartNoCapture():
{
    TextPattern m = null;
    Integer[] rep = null;
}
{
    ( m=tag() | m=position() | "(" m=constrainedQuery() ")" | m=queryFunctionCall() ) [ LOOKAHEAD(6) rep=repetitionAmount() ]
    {
        if (rep != null)
        {
            if (m instanceof TextPatternAnyToken)
            {
                TextPatternAnyToken any = (TextPatternAnyToken)m;
                m = any.repeat(rep[0], rep[1]);
            } else
                m = TextPatternRepetition.get(m, rep[0], rep[1]);
        }
        return m;
    }
|   "!" m=sequencePartNoCapture()
    {
        return new TextPatternNot(m);
    }
}

TextPattern queryFunctionCall():
{
    Token func = null;
    List<Object> queryFuncParamList = Collections.emptyList();
}
{
    func=<NAME> "(" [ queryFuncParamList=commaSeparatedParamList() ] ")"
    {
        String funcName = func.toString();
        /*if (!funcName.startsWith("_")) {
            throw new UnsupportedOperationException("Query functions are a BlackLab-specific extension to Corpus Query Language and, to avoid future problems, must start with '_' !");
        }*/
        return new TextPatternQueryFunction(funcName, queryFuncParamList);
    }
}

List<Object> commaSeparatedParamList():
{
    Object q = null;
    List<Object> p = new ArrayList<Object>();
}
{
    q=functionParam() [ "," p=commaSeparatedParamList() ]
    {
        p.add(0, q);
        return p;
    }
}

Object functionParam():
{
    Object q;
}
{
    q=constrainedQuery()  { return q; /* this covers both actual queries and plain old strings */ }
//|   <DEFAULT_VALUE>       { return null; /* use default value for parameter */ }
}

String captureLabel():
{
    Token l = null;
}
{
    ( l=<NAME> | l=<NUMBER> )
    {
        return l.toString();
    }
}

/* position: a simple attribute value or complex attribute expression between square brackets */
TextPattern position():
{
    TextPattern m = null;
    String f = null;
}
{
    m=positionWord() [f=flags()]        { return m; }
|   <DEFAULT_VALUE>                     { return TextPatternDefaultValue.get(); }
|   "[" [ m=positionLong() ] "]"
    {
        if (m == null)
            return new TextPatternAnyToken(1, 1);
        return m;
    }
}

String flags():
{
    Token f;
}
{
    f=<FLAGS> { return f.toString().substring(1); }
}

/* position word: no brackets, just a single token constraint for the default attribute (usually word form) */
TextPattern positionWord():
{
    String t = null;
}
{
    t=quotedString()      { return wrapper.simplePattern(t); }
}

/* expression inside square brackets: an attribute clause, or multiple
   attribute clauses combined with boolean operators */
TextPattern positionLong():
{
    TextPattern a = null, c = null;
    Token b = null;
}
{
    a=positionLongPart() [ b=booleanOperator() c=positionLong() ]
    {
        if (b == null)
            return a;
        if (b.toString().equals("->"))
            throw new UnsupportedOperationException("Implication operator only supported within global constraints");
        if (b.toString().equals("&"))
            return new TextPatternAnd(a, c);
        return new TextPatternOr(a, c);
    }
}

/* attribute clause: an attribute/value pair, attribute expression between parens, or a negated attribute/value pair */
TextPattern positionLongPart():
{
    TextPattern m = null;
}
{
    LOOKAHEAD(3)
    m=attValuePair()              { return m; }
|   "(" m=positionLong() ")"      { return m; }
|   "!" m=positionLongPart()      { return new TextPatternNot(m); }
}

/* attribute/value pair, with equals or not equals sign, or possibly just a value (default attribute) */
TextPattern attValuePair():
{
    TextPatternTerm v = null;
    String annot;
    String f = null;
}
{
    LOOKAHEAD(2)
    annot=annotName() "=" v=valuePart() [f=flags()]  { return wrapper.annotationClause(annot, v); }
|   annot=annotName() "!=" v=valuePart() [f=flags()] { return new TextPatternNot(wrapper.annotationClause(annot, v)); }
/* UNDOCUMENTED AND NONSTANDARD, REMOVE  (e.g. ["word"], meaning the same as just "word" without brackets)
|   v=valuePart() [f=flags()]                      { return v; }
*/
}

String annotName():
{
    Token t = null, subAnnot = null;
}
{
    t=<NAME> [ "/" subAnnot=<NAME> ]
    {
        String annotName = t.toString();
        if (subAnnot == null)
            return annotName;
        return annotName + "/" + subAnnot.toString();
    }
}

/* value expression: a value or multiple values combined with boolean operators */
/*   UNDOCUMENTED AND NONSTANDARD, REMOVE  (e.g. [word=("word"|"other")], use [word="word|other"] or [word="word" | word="other"])
TextPattern value():
{
    TextPattern a = null, c = null;
    Token b = null;
}
{
    LOOKAHEAD(3) a=valuePart() b=booleanOperator() c=value()
    {
        if (b.toString().equals("->"))
            throw new UnsupportedOperationException("Implication operator only supported within global constraints");
        if (b.toString().equals("&"))
            return new TextPatternAnd(a, c);
        return new TextPatternOr(a, c);
    }
|   a=valuePart()                   { return a; }
}
*/

/* value: a quoted string or a value expression between parentheses */
TextPatternTerm valuePart():
{
    TextPatternTerm m = null;
    String t = null;
}
{
    t=quotedString()               { return wrapper.simplePattern(t); }
/*  UNDOCUMENTED AND NONSTANDARD, REMOVE  (e.g. [word=("word"|"other")], use [word="word|other"] or [word="word" | word="other"])
|   "(" m=value() ")"              { return m; }
 */
}
