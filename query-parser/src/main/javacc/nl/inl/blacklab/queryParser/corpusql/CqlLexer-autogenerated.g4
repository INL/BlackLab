lexer grammar CqlLexer;

SKIP0 : ' ' -> skip ;
SKIP1 : '\t' -> skip ;
SKIP2 : '\n' -> skip ;
SKIP3 : '\r' -> skip ;
SINGLE_LINE_COMMENT : '#' (~[\n\r])* (('\n' | '\r' | '\r\n'))? -> channel(HIDDEN) ;
MULTI_LINE_COMMENT : '/*' ((~[*] | '*' ~[/]))* '*/' -> channel(HIDDEN) ;
WITHIN : W I T H I N  ;
CONTAINING : C O N T A I N I N G  ;
DEFAULT_VALUE : '_'  ;
ROOT_DEP_OP : '^-' (~[\-] ((~[\-] | '-' ~[>]))*)? '->' ([A-Za-z_\-0-9])*  ;
DEP_OP : ('!')? '-' (~[\-] ((~[\-] | '-' ~[>]))*)? '->' ([A-Za-z_\-0-9])*  ;
ALIGNMENT_OP : '=' (~[=] ((~[=] | '=' ~[>]))*)? '=>' ([A-Za-z_\-0-9])*  ;
NAME : [A-Za-z_] ([A-Za-z_\-0-9])*  ;
FLAGS : '%' ([cCdDlL])+  ;
NUMBER : ([0-9])+  ;
SETTINGS_OP : '@' ([A-Za-z_0-9])+ '=' ([A-Za-z_0-9])+ (',' ([A-Za-z_0-9])+ '=' ([A-Za-z_0-9])+)*  ;
QUOTED_STRING : '"' ((~["\\] | '\\' .))* '"'  ;
SINGLE_QUOTED_STRING : '\'' ((~['\\] | '\\' .))* '\''  ;
CONSTRAINT_THING : '::'  ;
EQUALS : '='  ;
NOT_EQUALS : '!='  ;
GREATER_THAN_EQUALS : '>='  ;
LESS_THAN_EQUALS : '<='  ;
GREATER_THAN : '>'  ;
LESS_THAN : '<'  ;
LPAREN : '('  ;
RPAREN : ')'  ;
NEGATE : '!'  ;
DOT : '.'  ;
COMMA : ','  ;
DELIMITER : ';'  ;
COLON : ':'  ;
FORWARD_SLASH : '/'  ;
BACKSLASH : '\\'  ;
MULT : '*'  ;
PLUS : '+'  ;
QUESTION : '?'  ;
LBRACE : '{'  ;
RBRACE : '}'  ;
AND : '&'  ;
OR : '|'  ;
ARROW_RIGHT : '->'  ;
LBRACKET : '['  ;
RBRACKET : ']'  ;
fragment A : [aA]  ;
fragment B : [bB]  ;
fragment C : [cC]  ;
fragment D : [dD]  ;
fragment E : [eE]  ;
fragment F : [fF]  ;
fragment G : [gG]  ;
fragment H : [hH]  ;
fragment I : [iI]  ;
fragment J : [jJ]  ;
fragment K : [kK]  ;
fragment L : [lL]  ;
fragment M : [mM]  ;
fragment N : [nN]  ;
fragment O : [oO]  ;
fragment P : [pP]  ;
fragment Q : [qQ]  ;
fragment R : [rR]  ;
fragment S : [sS]  ;
fragment T : [tT]  ;
fragment U : [uU]  ;
fragment V : [vV]  ;
fragment W : [wW]  ;
fragment X : [xX]  ;
fragment Y : [yY]  ;
fragment Z : [zZ]  ;
