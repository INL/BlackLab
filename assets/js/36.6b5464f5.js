(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{311:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"example-xpaths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-xpaths"}},[t._v("#")]),t._v(" Example XPaths")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/guide/how-to-configure-indexing.html#xpath-support-level"}},[t._v("When using Saxon")]),t._v(" you have extensive possibilities using XPath in BlackLab configuration. Some noteworthy examples are shown below.")],1),t._v(" "),a("p",[t._v("To learn more about modern XPath, "),a("a",{attrs:{href:"https://www.altova.com/training/xpath3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Altova's XPath 3 training"),a("OutboundLink")],1),t._v(" is a good resource, and there are many others.")]),t._v(" "),a("h2",{attrs:{id:"capture-punctuation-between-words"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#capture-punctuation-between-words"}},[t._v("#")]),t._v(" Capture punctuation between words")]),t._v(" "),a("p",[t._v("To capture text content between "),a("code",[t._v("<w/>")]),t._v(" tags:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("punctPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .//text()"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("not(ancestor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("w)"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("This captures any text node that is not a descendant of a "),a("code",[t._v("<w/>")]),t._v(" tag.")]),t._v(" "),a("p",[t._v("Another possible approach:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("punctPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .//text()"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("."),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!=''")]),t._v(" and preceding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(".//tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("pc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(".//tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("lb\n")])])]),a("p",[t._v("This captures non-empty text nodes after a "),a("code",[t._v("<w/>")]),t._v(" tag plus (the text contents of) "),a("code",[t._v("pc")]),t._v(" or "),a("code",[t._v("lb")]),t._v(" tags.")]),t._v(" "),a("h2",{attrs:{id:"isolate-a-part-of-speech-feature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isolate-a-part-of-speech-feature"}},[t._v("#")]),t._v(" Isolate a part of speech feature")]),t._v(" "),a("p",[t._v("Your data may have part of speech information that includes detailed features. Let's say this information is stored in an attribute with values like "),a("code",[t._v("UPosTag=PRON|Case=Nom|Person=3|PronType=Prs")]),t._v(". You can isolate the value of the "),a("code",[t._v("Case")]),t._v(" feature like this:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("valuePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" replace(./@msd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.*Case=([A-Za-z0-9]+).*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" '$1')\n")])])]),a("h2",{attrs:{id:"use-default-if-value-is-missing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-default-if-value-is-missing"}},[t._v("#")]),t._v(" Use default if value is missing")]),t._v(" "),a("p",[t._v("If some of your words have a lemma attribute, and you want to index the value "),a("code",[t._v("_UNKNOWN_")]),t._v(" if it's missing (perhaps to be able to locate these data problems easily), you can do that as follows:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("valuePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./(string(@lemma)"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" '_UNKNOWN_')"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"using-either-an-attribute-or-a-standoff-annotation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-either-an-attribute-or-a-standoff-annotation"}},[t._v("#")]),t._v(" Using either an attribute, or a standoff annotation")]),t._v(" "),a("p",[t._v("Again, let's say some of your words have "),a("code",[t._v("lemma")]),t._v(" attributes. But some have the lemma in a separate "),a("code",[t._v("tei:join")]),t._v(" element instead. You might use XPath to look up the appropriate value like this:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("valuePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n  let $xid "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("= @xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("id\n  return if (@lemma) then @lemma \n  else if ($xid) then\n    following"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@lemma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("matches(@target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#'||$xid||'( |$)')]/@lemma ")]),t._v("\n  else ()\n")])])]),a("p",[t._v("Note how we can easily split XPath expressions over multiple lines using "),a("code",[t._v(">-")]),t._v(" in YAML. (see "),a("a",{attrs:{href:"https://yaml-multiline.info/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML multiline strings"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("h2",{attrs:{id:"for-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-loops"}},[t._v("#")]),t._v(" For loops")]),t._v(" "),a("p",[t._v("You can even use "),a("code",[t._v("for")]),t._v(" loops if necessary, e.g.:")]),t._v(" "),a("div",{staticClass:"language-xquery extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xquery"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$xid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$xid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$join")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token axis operator"}},[t._v("following-sibling")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$xid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'( |$)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("lemma "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Thanks to "),a("a",{attrs:{href:"https://github.com/eduarddrenth",target:"_blank",rel:"noopener noreferrer"}},[t._v("@eduarddrenth"),a("OutboundLink")],1),t._v(" for the initial Saxon version and some of the examples.")])])}),[],!1,null,null,null);a.default=n.exports}}]);