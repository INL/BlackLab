(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{314:function(t,e,a){"use strict";a.r(e);var s=a(13),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),e("p",[t._v("BlackLab and BlackLab Server settings can be configured in configuration files.")]),t._v(" "),e("h2",{attrs:{id:"yaml-vs-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yaml-vs-json"}},[t._v("#")]),t._v(" YAML vs. JSON")]),t._v(" "),e("p",[t._v("These files can be in YAML or JSON format. On this page, we will use the YAML format (as it allows comments and is arguably more readable), but it the two can be easily converted back and forth (for example "),e("a",{attrs:{href:"https://www.json2yaml.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v("). Just be sure to use the "),e("code",[t._v(".json")]),t._v(" extension for JSON and "),e("code",[t._v(".yaml")]),t._v(" or "),e("code",[t._v(".yml")]),t._v(" for YAML.")]),t._v(" "),e("h2",{attrs:{id:"blacklab-vs-blacklab-server-config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#blacklab-vs-blacklab-server-config"}},[t._v("#")]),t._v(" BlackLab vs. BlackLab Server config")]),t._v(" "),e("p",[t._v("The configuration files are called "),e("code",[t._v("blacklab-server.yaml")]),t._v(" and "),e("code",[t._v("blacklab.yaml")]),t._v(". You most likely only need "),e("code",[t._v("blacklab-server.yaml")]),t._v(", which can contain everything "),e("code",[t._v("blacklab.yaml")]),t._v(" can and more.")]),t._v(" "),e("p",[t._v("To be precise: BlackLab programs such as QueryTool, IndexTool and BlackLab Server always look for "),e("code",[t._v("blacklab.yaml")]),t._v(". BlackLab Server also looks for "),e("code",[t._v("blacklab-server.yaml")]),t._v(". So if you're just running BlackLab Server, you probably only need a "),e("code",[t._v("blacklab-server.yaml")]),t._v(" file, but if you also want to configure some detail about how IndexTool and QueryTool (or other BlackLab-based applications) run, it can be useful to have a "),e("code",[t._v("blacklab.yaml")]),t._v(" file too.")]),t._v(" "),e("h2",{attrs:{id:"config-file-locations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#config-file-locations"}},[t._v("#")]),t._v(" Config file locations")]),t._v(" "),e("p",[t._v("Where should this file (or files) be located? BlackLab looks for them in the following places:")]),t._v(" "),e("ul",[e("li",[t._v("the directory specified in "),e("code",[t._v("$BLACKLAB_CONFIG_DIR")]),t._v(", if this environment variable was defined")]),t._v(" "),e("li",[e("code",[t._v("$HOME/.blacklab")])]),t._v(" "),e("li",[e("code",[t._v("/etc/blacklab")])]),t._v(" "),e("li",[t._v("the Java classpath")])]),t._v(" "),e("p",[t._v("In addition, BlackLab Server will also look for "),e("code",[t._v("blacklab-server.yaml")]),t._v(" in the directory where the .war file is located, e.g. "),e("code",[t._v("/usr/share/tomcat/webapps")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"minimal-config-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minimal-config-file"}},[t._v("#")]),t._v(" Minimal config file")]),t._v(" "),e("p",[t._v("Here's a minimal configuration file for BlackLab Server. Name it "),e("code",[t._v("blacklab-server.yaml")]),t._v(" and place it in the same directory as the "),e("code",[t._v("blacklab-server.war")]),t._v(" file or in "),e("code",[t._v("/etc/blacklab")]),t._v(" (or configure a different location as just described).")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Where indexes can be found")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (list directories whose subdirectories are indexes, or directories containing a single index)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("indexLocations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /data/index\n")])])]),e("p",[t._v("This simply tells BlackLab Server where to find its indexes.")]),t._v(" "),e("p",[t._v("A minimal example of "),e("code",[t._v("blacklab.yaml")]),t._v(" would be no file at all, as no setting in "),e("code",[t._v("blacklab.yaml")]),t._v(" is required for IndexTool or QueryTool to run.")]),t._v(" "),e("h2",{attrs:{id:"complete-config-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#complete-config-file"}},[t._v("#")]),t._v(" Complete config file")]),t._v(" "),e("p",[t._v("Below is a fully populated version of "),e("code",[t._v("blacklab-server.yaml")]),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("You don't need all these sections! Just use the ones you want to specifically influence, and leave the rest out. See the minimal config file above to get started.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("You can also use a file called "),e("code",[t._v("blacklab.yaml")]),t._v(" if you want to configure details about running "),e("code",[t._v("IndexTool")]),t._v(" and "),e("code",[t._v("QueryTool")]),t._v(" as well. It can only contain the "),e("code",[t._v("log")]),t._v(", "),e("code",[t._v("search")]),t._v(", "),e("code",[t._v("indexing")]),t._v(" and "),e("code",[t._v("plugin")]),t._v(" sections (located at the end of this example config). This file may be useful if you want to increase the number of metadata values stored in the index metadata file, for example. If you're not sure, you probably don't need this.")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BlackLab Server config file")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ===============================================================")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This indicates we're using the new index format.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Where indexes can be found")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (list directories whose subdirectories are indexes, or directories containing a single index)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("indexLocations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /data/index\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Directory containing each users' private indexes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (only works if you've configured an authentication system, see below)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("userIndexes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /data/user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("index\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Settings related to BlackLab Server's protocol, i.e. requests and responses")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If true, omits empty annotation values from XML results.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("omitEmptyProperties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default response type (XML or JSON; default XML)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultOutputType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" XML\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Value for the Access-Control-Allow-Origin HTTP header (default: *)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("accessControlAllowOrigin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v("\n    \n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Defaults and maximum values for parameters")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (some values will affect server load)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("parameters")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Are searches case/accent-sensitive or -insensitive by default?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultSearchSensitivity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" insensitive\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The maximum number of hits to process (return as results, and ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use for sorting, grouping, etc.). -1 means no limit.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# ("maxretrieve" parameter)')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (higher values will put more stress on the server)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("processHits")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The maximum number of hits to count. -1 means no limit.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# ("maxcount" parameter)')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (higher values will put more stress on the server)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("countHits")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("-1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Number of results per page ("number" parameter). -1 means no limit.')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (a very high max value might lead to performance problems)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pageSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Context around match ("context" parameter)')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (higher values might cause copyright issues and may stress the server)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set to 0 to omit the left and right context altogether.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contextSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Default pattern language to use.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  The pattlang URL parameter override this value.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("patternLanguage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bcql\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Default filter language to use.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  The filterlang URL parameter override this value.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filterLanguage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" luceneql\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# By default, should we include the grouped hits in")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# grouped responses? If false, just include group ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# identity and size. Defaults to false. Can be overridden ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# using the "includegroupcontents" URL parameter.')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("writeHitsAndDocsInGroupedHits")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If we're capturing part of our matches, should")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# we include empty captures? This can happen when the")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# clause to capture is optional, e.g. A:[]?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Defaults to false. Can be overridden using the ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "omitemptycaptures" URL parameter.')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("omitEmptyCaptures")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# What REST API version to attempt compatibility with.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Valid values are currently: 3.0, 4.0, current, experimental.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Defaults to current.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("api")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" current\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Settings for job caching.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How much free memory the cache should shoot for (in megabytes) while cleaning up.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Because we don't have direct control over the garbage collector, we can't reliably clean up until")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this exact number is available. Instead we just get rid of a few cached tasks whenever a")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# new task is added and we're under this target number.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("targetFreeMemMegs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The minimum amount of free memory required to start a new search task. If this memory is not available,")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# your search will be queued.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("minFreeMemForSearchMegs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Maximum number of searches that may be queued. If you try to add another search, this will return an error.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Queued searches don't take up memory, but it's no use building up a huge queue that will take a very long time")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# to get through. Better to ask users to return when server load is lower.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxQueuedSearches")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How long after it was last accessed will a completed search task be removed from ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the cache? (in seconds)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (don't set this too low; instead, set targetFreeMemMegs, the target amount of free memory)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you want to disable the cache altogether, set this to 0.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxJobAgeSec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If a search is aborted, how long should we keep the search in the cache to prevent")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# the client from resubmitting right away? A sort of "deny list" if you will.')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("denyAbortedSearchSec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# After how much time should a running search be aborted?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (larger values put stress on the server, but allow complicated searches to complete)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxSearchTimeSec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How long the client may keep results we give them in their local (browser) cache.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is used to write HTTP cache headers. Low values mean clients might re-request")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the same information, making clients less responsive and consuming more network resources.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Higher values make clients more responsive but could cause problems if the data (or worse,")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the protocol) changes after an update. A value of an hour or so seems reasonable.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientCacheTimeSec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Maximum number of cache entries to keep.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Please note that memory use per cache entry may vary wildly,")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# so you may prefer to use targetFreeMemMegs to set a "free memory goal"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# and/or maxJobAgeSec to set a maximum age for cache entries.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxNumberOfJobs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The cache implementation to use.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (FQDN or class name (in package nl.inl.blacklab.server.search) of")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SearchCache subclass to instantiate)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The default is BlsCache. An alternative is ResultsCache, which is more")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# efficient if you have a large number of small, short-lived indexes.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("implementation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BlsCache\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Settings related to tuning server load and client responsiveness")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("performance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How many search tasks should be able to run simultaneously")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (set this to take advantage of the cores/threads available to the machine;")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# probably don't set it any larger, as this won't help and might hurt)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that this is a rough guideline, not an absolute maximum number of threads")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# that will ever be running. New searches are only started (unqueued) if there's ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fewer than this number of threads running.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (-1 to autodetect)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxConcurrentSearches")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How many threads may a single search task use at most?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (lower values will allow more simultaneous searches to run;")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# higher values improve search performance, but will crowd out other searches.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# e.g. if you set this to the same number as maxConcurrentSearches, a single ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# search may queue all other searches until it's done)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxThreadsPerSearch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Abhort a count if the client hasn't asked about it for 30s")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (lower values are easier on the server, but might abort a count too soon)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("abandonedCountAbortTimeSec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Settings for diagnosing problems")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("debug")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  A list of IPs that will run in debug mode.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  In debug mode, ...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  - the /cache-info resource show the contents of the job cache")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    (other debug information resources may be added in the future)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  - output is prettyprinted by default (can be overriden with the prettyprint")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    GET parameter)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("addresses")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 127.0.0.1       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  IPv4 localhost")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  IPv6 localhost")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How to determine current user")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (you only need this if you want per-user private indices or authorization)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("authentication")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("system")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AuthDebugFixed\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("userId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" jan.niestadt@ivdnt.org\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# For CLARIN (Shibboleth), use the following authentication config:")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#class: AuthClarinEppn")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Clients from these IPs may choose their own user id and send it along in a GET parameter userid.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  This setting exists for web applications that contact the webservice (partly) through the")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  server component. They would get the same session id for each user, making them likely ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  to hit the maxRunningJobsPerUser setting. Instead, they should assign session IDs for each of")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  their clients and send them along with any request to the webservice.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("overrideUserIdIps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 127.0.0.1       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  IPv4 localhost")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  IPv6 localhost")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is an insecure way of authenticating to BlackLab Server by sending")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# two HTTP headers. It is only intended for testing purposes.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Choose a 'secret' password here. Then send your requests to BlackLab Server ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# with the extra HTTP headers X-BlackLabAccessToken (the 'secret' password) and")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# X-BlackLabUserId (the user you wish to authenticate as).")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Needless to say this method is insecure because it allows full access to")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all users' corpora, and the access token could potentially leak to an")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# attacker.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DO NOT USE EXCEPT FOR TESTING")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#debugHttpHeaderAuthToken: secret")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ---------------------------------------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# What follows are general BlackLab settings that can apply to different ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BlackLab applications, not just to BlackLab Server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (These can go in a separate file named blacklab.yaml, which is read by all")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BlackLab applications. Make sure to include configVersion as well)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (you generally don't need to change these if you're running BlackLab Server,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# unless you're using some of the advanced features such as indexing/plugins,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or you're trying to diagnose problems)")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Settings related to logging")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# What subjects to log messages for")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("trace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BL trace settings")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("indexOpening")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("optimization")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("queryExecution")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BLS trace settings")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Defaults for searching")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NOTE: these are BlackLab defaults, not the defaults for the BlackLab Server parameters;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# see the parameters section for those.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("search")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Collator to use for sorting, grouping, etc.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("collator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nl   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# required")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("country")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NL    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# optional")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#variant: x     # optional")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default number of words around hit.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contextSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The default maximum number of hits to retrieve (and use for sorting, grouping, etc.).")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1 means no limit, but be careful, this may stress your server.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxHitsToRetrieve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The default maximum number of hits to count.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1 means no limit, but be careful, this may stress your server.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxHitsToCount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("-1")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# How eagerly to apply "forward index matching" to certain queries')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [advanced technical setting; don't worry about this unless you want to experiment]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [if you want to disable forward index matching, which may be beneficial")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  if you indexes are small and your query volume is high, set this to 0]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fiMatchFactor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("900")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Enable result sets larger than 2^31?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you don't need this, you can disable it for slightly better performance.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (defaults to true)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enableHugeResultSets")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Options for indexing operations, if enabled")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (right now, in BLS, they're only enabled for logged-in users in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  their own private area)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("indexing")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (By default, http downloads of e.g. metadata are not allowed)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("downloadAllowed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Where to store cached files")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("downloadCacheDir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tmp/bls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("download"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cache\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Max. size of entire cache in MB")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("downloadCacheSizeMegs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Max. size of single download in MB")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("downloadCacheMaxFileSizeMegs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Max. number of zip files to keep opened")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("zipFilesMaxOpen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of threads to use for indexing operations")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (more threads is faster, but uses more memory)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("numberOfThreads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Max. number of values to store per metadata field")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxMetadataValuesToStore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Max. number of indices per user")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (only relevant if you've configured private indices and authorization)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxNumberOfIndicesPerUser")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Plugin options. Plugins allow you to automatically convert files (e.g. .html, .docx) or ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# apply linguistic tagging before indexing via BLS (experimental functionality).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("plugins")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Should we initialize plugins when they are first used?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (plugin initialization can take a while; during development, delayed initialization is")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# often convenient, but during production, you usually want to initialize right away)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("delayInitialization")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # Individual plugin configurations")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("plugins")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Conversion plugin")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("OpenConvert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jarPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/jan/projects/openconvert_en_tagger/OpenConvertMaven/target/OpenConvert-0.2.0.jar"')]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Tagging plugin")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("DutchTagger")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jarPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/jan/projects/openconvert_en_tagger/DutchTagger/target/DutchTagger-0.2.0.jar"')]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("vectorFile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/jan/projects/openconvert_en_tagger/tagger-data/sonar.vectors.bin"')]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("modelFile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/jan/projects/openconvert_en_tagger/tagger-data/withMoreVectorrs"')]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("lexiconFile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/jan/projects/openconvert_en_tagger/tagger-data/spelling.tab"')]),t._v("\n\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);