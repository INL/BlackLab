/* Generated By:JavaCC: Do not edit this line. CorpusQueryLanguageParser.java */
package nl.inl.blacklab.queryParser.corpusql;

import java.util.Map;
import java.util.HashMap;
import nl.inl.blacklab.index.complex.ComplexFieldUtil;
import nl.inl.blacklab.search.TextPattern;
import nl.inl.blacklab.search.TextPatternAnd;
import nl.inl.blacklab.search.TextPatternContaining;
import nl.inl.blacklab.search.TextPatternEdge;
import nl.inl.blacklab.search.TextPatternNot;
import nl.inl.blacklab.search.TextPatternOr;
import nl.inl.blacklab.search.TextPatternProperty;
import nl.inl.blacklab.search.TextPatternRegex;
import nl.inl.blacklab.search.TextPatternTags;
import nl.inl.blacklab.search.TextPatternWithin;
import nl.inl.blacklab.search.TextPatternCaptureGroup;
import nl.inl.blacklab.search.indexstructure.IndexStructure;
import nl.inl.blacklab.search.sequences.TextPatternAnyToken;
import nl.inl.blacklab.search.sequences.TextPatternRepetition;
import nl.inl.blacklab.search.sequences.TextPatternSequence;

@SuppressWarnings("all")

public class CorpusQueryLanguageParser implements CorpusQueryLanguageParserConstants {

    public static void main(String[] args) throws nl.inl.blacklab.queryParser.corpusql.ParseException
    {
                CorpusQueryLanguageParser parser = new CorpusQueryLanguageParser(new java.io.StringReader(args[0]));
                parser.query();
    }

    public static TextPattern parse(String query) throws nl.inl.blacklab.queryParser.corpusql.ParseException
    {
        CorpusQueryLanguageParser parser = new CorpusQueryLanguageParser(new java.io.StringReader(query));
        return parser.query();
    }

    private int num(Token t)
    {
        return Integer.parseInt(t.toString());
    }

    private String chopEnds(String input)
    {
        if (input.length() >= 2)
                return input.substring(1, input.length() - 1);
        throw new RuntimeException();
    }

    private String getStringBetweenQuotes(String input) throws SingleQuotesException
    {
        if (!allowSingleQuotes && input.charAt(0) == '\u005c'')
            throw new SingleQuotesException();
        return chopEnds(input);
    }

    private TextPattern simplePattern(String str)
    {
        if (str.length() > 0) {
            if (str.charAt(0) != '^')
                str = "^" + str;
            if (str.charAt(str.length() - 1) != '$')
                str += "$";
        }

        // Treat everything like regex now; will be simplified later if possible
        return new TextPatternRegex(str);
    }

    /** Allow strings to be quoted using single quotes? */
    private boolean allowSingleQuotes = true;

    /** Allow strings to be quoted using single quotes? [default: yes] */
    public void setAllowSingleQuotes(boolean b) {
        allowSingleQuotes = b;
    }

    /** Allow strings to be quoted using single quotes? */
    public boolean getAllowSingleQuotes() {
        return allowSingleQuotes;
    }

    private String defaultProperty = "word"; //ComplexFieldUtil.DEFAULT_MAIN_PROP_NAME;

    public void setDefaultProperty(IndexStructure structure, String fieldName) {
        defaultProperty = structure.getComplexFieldDesc(fieldName).getMainProperty().getName();
    }

    public void setDefaultProperty(String property) {
        defaultProperty = property;
    }

    public String getDefaultProperty() {
        return defaultProperty;
    }

    private TextPattern propertyClause(String prop, TextPattern value) {
        // Main property has a name. Use that.
        if (prop == null || prop.length() == 0)
            prop = defaultProperty;
        return new TextPatternProperty(prop, value);
    }

// --- Grammar rules start here --- 

/* a query */
  final public TextPattern query() throws ParseException {
        TextPattern a = null;
    a = complexQuery();
    jj_consume_token(0);
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public TextPattern complexQuery() throws ParseException {
    TextPattern a = null, b = null;
    Token op = null;
    a = simpleQuery();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHIN:
    case CONTAINING:
      op = queryOperator();
      b = complexQuery();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
        if (op == null)
            {if (true) return a;}
        if (op.toString().equals("within")) {
            // a within b
            {if (true) return new TextPatternWithin(a, b);}
        }

        // a containing b
        {if (true) return new TextPatternContaining(a, b);}
    throw new Error("Missing return statement in function");
  }

  final public Token queryOperator() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHIN:
      t = jj_consume_token(WITHIN);
      break;
    case CONTAINING:
      t = jj_consume_token(CONTAINING);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/* a simple query (not including containing, within, etc.) */
  final public TextPattern simpleQuery() throws ParseException {
    TextPattern query = null, rest = null;
    Token b = null;
    query = sequence();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
    case 24:
    case 25:
      b = booleanOperator();
      rest = simpleQuery();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                if (b == null)
                        {if (true) return query;}
        if (b.toString().equals("->"))
            {if (true) throw new UnsupportedOperationException("Implication operator not yet supported");}
                if (b.toString().equals("&"))
                        {if (true) return new TextPatternAnd(query, rest);}
                {if (true) return new TextPatternOr(query, rest);}
    throw new Error("Missing return statement in function");
  }

/* a sequence of token constraints */
  final public TextPattern sequence() throws ParseException {
        TextPattern first = null;
        TextPattern result = null;
        TextPattern[] tag = null;
    Token t2 = null;
    first = sequencePart();
    if (jj_2_1(2)) {
      result = sequenceRest(first);
    } else {
      ;
    }
                if (result == null)
                        result = first;

                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/* a start or self-closing tag tag such as <s> or <s/> (for finding XML elements).
 * Note that it returns one TextPattern, but if it's in [0] that means it's a start
 * tag; if it's in [1] it's a self-closing tag.
 */
  final public TextPattern tag() throws ParseException {
    Token tagName, endTagSlash = null, selfCloseSlash = null;
    Map<String, String> attr = new HashMap<String, String>();
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      endTagSlash = jj_consume_token(14);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    tagName = jj_consume_token(NAME);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      attributes(attr);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      selfCloseSlash = jj_consume_token(14);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(15);
        if (endTagSlash != null && selfCloseSlash != null) {
            {if (true) throw new MalformedTagException();}
        }
        TextPattern tags = new TextPatternTags(tagName.toString(), attr);
        if (selfCloseSlash != null)
            {if (true) return tags;}
        if (endTagSlash != null) {
            if (attr.size() > 0) {
                {if (true) throw new MalformedTagException("Cannot filter XML end tag on attributes");}
            }
            {if (true) return new TextPatternEdge(tags, true);} // right edge
        }
        {if (true) return new TextPatternEdge(tags, false);} // left edge

    throw new Error("Missing return statement in function");
  }

  final public Token quotedString() throws ParseException {
    Token a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED_STRING:
      a = jj_consume_token(QUOTED_STRING);
                               {if (true) return a;}
      break;
    case SINGLE_QUOTED_STRING:
      a = jj_consume_token(SINGLE_QUOTED_STRING);
                               {if (true) return a;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void attributes(Map<String, String> attr) throws ParseException {
    Token name, value;
    name = jj_consume_token(NAME);
    jj_consume_token(16);
    value = quotedString();
        attr.put(name.toString(), getStringBetweenQuotes(value.toString()));
  }

/* continuation of a sequence (after the first part) */
  final public TextPattern sequenceRest(TextPattern first) throws ParseException {
        Token op = null;
        TextPattern rest = null;
    rest = sequence();
                if (rest == null)
                        {if (true) return first;}
                {if (true) return new TextPatternSequence(first, rest);}
    throw new Error("Missing return statement in function");
  }

/* a repetition specifier */
  final public Integer[] repetitionAmount() throws ParseException {
        Token t = null, t2 = null;
        Integer[] minMax = new Integer[2];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
                                              minMax[0] = 0; minMax[1] = -1; {if (true) return minMax;}
      break;
    case 18:
      jj_consume_token(18);
                                              minMax[0] = 1; minMax[1] = -1; {if (true) return minMax;}
      break;
    case 19:
      jj_consume_token(19);
                                              minMax[0] = 0; minMax[1] = 1; {if (true) return minMax;}
      break;
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_2(3)) {
        jj_consume_token(20);
        t = jj_consume_token(NUMBER);
        jj_consume_token(21);
                                              minMax[0] = minMax[1] = num(t); {if (true) return minMax;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 20:
          jj_consume_token(20);
          t = jj_consume_token(NUMBER);
          jj_consume_token(22);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            t2 = jj_consume_token(NUMBER);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          jj_consume_token(21);
                minMax[0] = num(t);
                if (t2 == null)
                        minMax[1] = -1;
                else
                        minMax[1] = num(t2);
                {if (true) return minMax;}
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/* boolean operator: and, or or implication */
  final public Token booleanOperator() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      t = jj_consume_token(23);
      break;
    case 24:
      t = jj_consume_token(24);
      break;
    case 25:
      t = jj_consume_token(25);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/* sequence part: one part in a sequence, possibly with a repetition operator */
  final public TextPattern sequencePart() throws ParseException {
        TextPattern m = null;
        Integer[] rep = null;
        Token captureName = null;
        Token captureNum = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
    case NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        captureName = jj_consume_token(NAME);
        break;
      case NUMBER:
        captureNum = jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(26);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      m = tag();
      break;
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
    case 29:
      m = position();
      break;
    case 27:
      jj_consume_token(27);
      m = complexQuery();
      jj_consume_token(28);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_3(6)) {
      rep = repetitionAmount();
    } else {
      ;
    }
                if (rep != null)
                {
            if (m instanceof TextPatternAnyToken)
            {
                TextPatternAnyToken any = (TextPatternAnyToken)m;
                m = any.repeat(rep[0], rep[1]);
            } else
                m = new TextPatternRepetition(m, rep[0], rep[1]);
                }
                if (captureName != null || captureNum != null) {
                        String name = captureName != null ? captureName.toString() : captureNum.toString();
                    m = new TextPatternCaptureGroup(m, name);
                }
                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/* position: a simple attribute value or complex attribute expression between square brackets */
  final public TextPattern position() throws ParseException {
        TextPattern m = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
      m = positionWord();
                                   {if (true) return m;}
      break;
    case 29:
      jj_consume_token(29);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
      case 27:
      case 31:
        m = positionLong();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(30);
        if (m == null)
            {if (true) return new TextPatternAnyToken(1, 1);}
        {if (true) return m;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* position word: no brackets, just a single token constraint for the default attribute (usually word form) */
  final public TextPattern positionWord() throws ParseException {
        Token t = null;
    t = quotedString();
                                {if (true) return simplePattern(getStringBetweenQuotes(t.toString()));}
    throw new Error("Missing return statement in function");
  }

/* expression inside square brackets: an attribute clause, or multiple 
   attribute clauses combined with boolean operators */
  final public TextPattern positionLong() throws ParseException {
        TextPattern a = null, c = null;
        Token b = null;
    a = positionLongPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
    case 24:
    case 25:
      b = booleanOperator();
      c = positionLong();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                if (b == null)
                        {if (true) return a;}
        if (b.toString().equals("->"))
            {if (true) throw new UnsupportedOperationException("Implication operator not yet supported");}
                if (b.toString().equals("&"))
                        {if (true) return new TextPatternAnd(a, c);}
                {if (true) return new TextPatternOr(a, c);}
    throw new Error("Missing return statement in function");
  }

/* attribute clause: an attribute/value pair, attribute expression between parens, or a negated attribute/value pair */
  final public TextPattern positionLongPart() throws ParseException {
        TextPattern m = null;
    if (jj_2_4(3)) {
      m = attValuePair();
                                        {if (true) return m;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        m = positionLong();
        jj_consume_token(28);
                                        {if (true) return m;}
        break;
      case 31:
        jj_consume_token(31);
        m = positionLongPart();
                                        {if (true) return new TextPatternNot(m);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* attribute/value pair, with equals or not equals sign, or possibly just a value (default attribute) */
  final public TextPattern attValuePair() throws ParseException {
        TextPattern v = null;
        Token t = null;
    if (jj_2_5(2)) {
      t = jj_consume_token(NAME);
      jj_consume_token(16);
      v = valuePart();
                                          {if (true) return propertyClause(t.toString(), v);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
        jj_consume_token(32);
        v = valuePart();
                                           {if (true) return new TextPatternNot(propertyClause(t.toString(), v));}
        break;
      case QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
      case 27:
        v = valuePart();
                                          {if (true) return v;}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* value expression: a value or multiple values combined with boolean operators */
  final public TextPattern value() throws ParseException {
        TextPattern a = null, c = null;
        Token b = null;
    if (jj_2_6(3)) {
      a = valuePart();
      b = booleanOperator();
      c = value();
        if (b.toString().equals("->"))
            {if (true) throw new UnsupportedOperationException("Implication operator not yet supported");}
                if (b.toString().equals("&"))
                        {if (true) return new TextPatternAnd(a, c);}
                {if (true) return new TextPatternOr(a, c);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
      case 27:
        a = valuePart();
                                          {if (true) return a;}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* value: a quoted string, a value expression between parens, or a negated value */
  final public TextPattern valuePart() throws ParseException {
        TextPattern m = null;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED_STRING:
    case SINGLE_QUOTED_STRING:
      t = quotedString();
                                        {if (true) return simplePattern(getStringBetweenQuotes(t.toString()));}
      break;
    case 27:
      jj_consume_token(27);
      m = value();
      jj_consume_token(28);
                                         {if (true) return m;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(13)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(32)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(16)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(20)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(22)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(20)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(29)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(SINGLE_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CorpusQueryLanguageParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180,0x180,0x3800000,0x4000,0x200,0x4000,0x1800,0x400,0xe0000,0x100000,0x3800000,0x600,0x600,0x28003800,0x88001a00,0x20001800,0x3800000,0x88000000,0x8001a00,0x8001800,0x8001800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CorpusQueryLanguageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CorpusQueryLanguageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CorpusQueryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CorpusQueryLanguageParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CorpusQueryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CorpusQueryLanguageParser(CorpusQueryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CorpusQueryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
