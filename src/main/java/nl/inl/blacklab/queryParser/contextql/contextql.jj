/*******************************************************************************
 * Copyright (c) 2010, 2012 Institute for Dutch Lexicology
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/*

Contextual Query Language (SRU CQL, http://www.loc.gov/standards/sru/) parser definition.

Grammar based on BNF found here: http://srw.cheshire3.org/cql/bnf.html

javacc is used to generate Java code from this parser definition.

*/

options 
{
	STATIC=false;
	JAVA_UNICODE_ESCAPE=true;
	//USER_CHAR_STREAM=true;
}

PARSER_BEGIN(ContextualQueryLanguageParser)

package nl.inl.blacklab.queryParser.contextql;

import nl.inl.blacklab.search.CompleteQuery;
import nl.inl.blacklab.search.Searcher;
import nl.inl.blacklab.search.indexstructure.IndexStructure;

@SuppressWarnings("all")

public class ContextualQueryLanguageParser {

    public static void main(String[] args) throws nl.inl.blacklab.queryParser.contextql.ParseException 
    {
		ContextualQueryLanguageParser parser = new ContextualQueryLanguageParser(new java.io.StringReader(args[0]));
		parser.query();
    }
    
    /**
     * Parse a Contextual Query Language query.
     
     * @param searcher our index
     * @param query our query
     * @return the parsed query
     */
    public static CompleteQuery parse(Searcher searcher, String query) throws nl.inl.blacklab.queryParser.contextql.ParseException 
    {
        ContextualQueryLanguageParser parser = new ContextualQueryLanguageParser(new java.io.StringReader(query));
        parser.setSearcher(searcher);
        return parser.query();
    }
    
    /**
     * @param query our query
     * @return the parsed query
     * @deprecated use version that also takes a Searcher, so we can tell the properties from the metadata fields
     */
    @Deprecated
    public static CompleteQuery parse(String query) throws nl.inl.blacklab.queryParser.contextql.ParseException 
    {
        ContextualQueryLanguageParser parser = new ContextualQueryLanguageParser(new java.io.StringReader(query));
        return parser.query();
    }
    
    private String chopEnds(String input)
    {
    	if (input.length() >= 2)
    		return input.substring(1, input.length() - 1);
    	throw new RuntimeException();
    }
    
    private Searcher searcher;
    
    public void setSearcher(Searcher searcher) {
    	this.searcher = searcher;
    }
    
    private String defaultProperty = "contents.word";
    
    public void setDefaultProperty(IndexStructure structure, String fieldName) {
        defaultProperty = structure.getComplexFieldDesc(fieldName).getMainProperty().getName();
    }

    public void setDefaultProperty(String property) {
        defaultProperty = property;
    }

    public String getDefaultProperty() {
        return defaultProperty;
    }

}

PARSER_END(ContextualQueryLanguageParser)

// Skip whitespace and comment
SKIP:  
{
	" " 
|	"\t" 
|	"\n" 
|	"\r"
}

/* Comments are 'special tokens': they are not reported, but are available
   for use by the next reported token */
SPECIAL_TOKEN:
{
	<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
|	<MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/"])* "*/">
}

// Token definitions
TOKEN [IGNORE_CASE]:
{
    <AND: "and" >
|   <OR: "or" >
|   <NOT: "not" >
|   <PROX: "prox" >
|   <IDENTIFIER: (["A"-"Z","a"-"z","_",".","-","*","?","0"-"9"])+ >
|	<STRING: "\"" (~["\"","\\"] | "\\" ~[] )* "\"" >
}

// --- Grammar rules start here --- 

/* a query */
CompleteQuery query(): 
{
	CompleteQuery a = null;
} 
{
    a=queryInternal() <EOF>
    {
        return a;
    }
}

CompleteQuery queryInternal():
{
	CompleteQuery a = null;
}
{
    scope() a=queryInternal()
    {
        return a;
    }
|   a=scopedClause()
    {
        return a;
    }
}

void scope():
{
}
{
    ">" [ LOOKAHEAD(2) prefix() "=" ] uri()
}

String prefix():
{
    String a;
}
{
    a=term()  { return a; }
}

String uri():
{
    String a;
}
{
    a=term()  { return a; }
}

CompleteQuery scopedClause():
{
    CompleteQuery a, b = null;
    String op = null;
}
{
    a=searchClause() [ op=booleanGroup() b=scopedClause() ]
    {
        if (op == null)
            return a;
        return ContextQlParseUtils.combineClauses(a, op, b);
    }
}

String booleanGroup():
{
    String a;
}
{
    a=ruleBoolean() [ modifierList() ]   { return a; }
}

String ruleBoolean():
{
    Token a;
}
{
    a=<AND>         {return a.toString();}
|   a=<OR>          {return a.toString();}
|   a=<NOT>         {return a.toString();}
|   a=<PROX>        {return a.toString();}
}

CompleteQuery searchClause():
{
    CompleteQuery tp;
    String i = null, r = null, t;
}
{
    "(" tp=queryInternal() ")"                  { return tp; }
|   [ LOOKAHEAD(2) i=index() r=relation() ] t=searchTerm()  { return ContextQlParseUtils.clause(searcher, i, r, t, defaultProperty); }
}

String index():
{
    String a;
}
{
    a=term()  { return a; }
}

String relation():
{
    String a;
}
{
    a=comparitor() [ modifierList() ]
    {
        return a;
    }
}

String comparitor():
{
    String a;
}
{
    a=comparitorSymbol() {return a;}
|   a=namedComparitor()  {return a;}
}

String comparitorSymbol():
{
    Token a;
}
{
    a="="   {return a.toString();}
|   a=">"   {return a.toString();}
|   a="<"   {return a.toString();}
|   a=">="  {return a.toString();}
|   a="<="  {return a.toString();}
|   a="<>"  {return a.toString();}
}

String namedComparitor():
{
    String a;
}
{
    a=identifier()  {return a;}
}

void modifierList():
{
}
{
    LOOKAHEAD(2)
    "/" modifier() [ modifierList() ]
|   "/" modifierList()
}

void modifier():
{
}
{
    modifierName() [ comparitorSymbol() modifierValue() ]
    { throw new UnsupportedOperationException("Relation modifiers not supported yet!"); }
}

String modifierName():
{
    String a;
}
{
    a=term()  { return a; }
}

String modifierValue():
{
    String a;
}
{
    a=term()  { return a; }
}

String searchTerm():
{
    String a;
}
{
    a=term()  { return a; }
}

String term():
{
    String a;
    Token t;
}
{
    a=identifier()  {return a;}
|   t=<AND>         {return t.toString();}
|   t=<OR>          {return t.toString();}
|   t=<NOT>         {return t.toString();}
|   t=<PROX>        {return t.toString();}
}

String identifier():
{
    Token a;
}
{
    a=<IDENTIFIER>   {return a.toString();}
|   a=<STRING>       {return chopEnds(a.toString());}
}

