package nl.inl.blacklab.forwardindex;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import it.unimi.dsi.fastutil.ints.IntArrays;
import it.unimi.dsi.fastutil.ints.IntComparator;

/**
 * Quicky sort very large primitive integer array in parallel.
 *
 * We need this for determining global term sort order while opening very large integrated indexes.
 *
 * This version was initially generated by ChatGPT, but thoroughly tested, fixed and improved by hand.
 * Surprisingly, it is now faster for very large arrays (10M or so) than FastUtil's
 * IntArrays.parallelQuickSort().
 *
 * These improvements on the initial version were made:
 * - originally used to create executor once, but shut it down after every call
 * - shutdown the executor before the first two tasks had a chance to add other tasks
 * - originally used Comparator, causing bad performance through boxing/unboxing
 * - use FastUtil's quicksort for sorting smaller arrays as it's cleverer than basic quicksort
 *
 * Other than that, the code was correct.
 */
public class ParallelIntSorter {

    private static final int THRESHOLD = 10_000; // Minimum size of array to parallelize sorting

    private static final int NUM_THREADS = Runtime.getRuntime().availableProcessors(); // Number of threads to use

    private static final boolean ENABLE_MULTITHREADING = true;

    private static ExecutorService executor;

    private static Random random = new Random();

    private static List<Future<?>> tasks = new ArrayList<>();

    public static void close() {
    }

    public static void setSeed(long seed) {
        random = new Random(seed);
    }

    public static void parallelSort(int[] array, IntComparator comparator) {
        // Make sure our executor gets shutdown at program exit, or we will hang.
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            if (executor != null) {
                synchronized (executor) {
                    // Shut down now
                    if (!executor.isTerminated()) {
                        executor.shutdownNow();
                    }
                }
            }
        }));
        executor = Executors.newFixedThreadPool(NUM_THREADS); // Thread pool
        parallelSort(array, 0, array.length - 1, comparator);

        // Wait for any tasks to complete
        while (true) {
            synchronized (tasks) {
                if (tasks.stream().allMatch(Future::isDone))
                    break;
            }
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        synchronized (executor) {
            // Shut down gracefully
            if (!executor.isTerminated()) {
                executor.shutdown();
                try {
                    executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }

    private static void parallelSort(int[] array, int left, int right, IntComparator comparator) {
        if (left < right) {
            int pivotIndex = partition(array, left, right, comparator);
            if (right - left + 1 < THRESHOLD) {
                // Sort sequentially for small arrays

                //quicksort(array, left, pivotIndex - 1, comparator);
                //quicksort(array, pivotIndex + 1, right, comparator);
                IntArrays.quickSort(array, left, pivotIndex, comparator);
                IntArrays.quickSort(array, pivotIndex + 1, right + 1, comparator);

            } else {
                // Sort left and right partitions in parallel using thread pool
                if (ENABLE_MULTITHREADING) {
                    Future<?> f1 = executor.submit(() -> parallelSort(array, left, pivotIndex - 1, comparator));
                    Future<?> f2 = executor.submit(() -> parallelSort(array, pivotIndex + 1, right, comparator));
                    synchronized (tasks) {
                        tasks.add(f1);
                        tasks.add(f2);
                    }
                } else {
                    parallelSort(array, left, pivotIndex - 1, comparator);
                    parallelSort(array, pivotIndex + 1, right, comparator);
                }
            }
        }
    }

    public static int partition(int[] array, int left, int right, IntComparator comparator) {
        int pivotIndex = left + random.nextInt(right - left + 1);
        int pivotValue = array[pivotIndex];
        swap(array, pivotIndex, right);
        int storeIndex = left;
        for (int i = left; i < right; i++) {
            if (comparator.compare(array[i], pivotValue) <= 0) {
                swap(array, i, storeIndex);
                storeIndex++;
            }
        }
        swap(array, storeIndex, right);
        return storeIndex;
    }

//    private static void quicksort(int[] array, int left, int right, IntComparator comparator) {
//        if (left < right) {
//            int pivotIndex = partition(array, left, right, comparator);
//            quicksort(array, left, pivotIndex - 1, comparator);
//            quicksort(array, pivotIndex + 1, right, comparator);
//        }
//    }

    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
