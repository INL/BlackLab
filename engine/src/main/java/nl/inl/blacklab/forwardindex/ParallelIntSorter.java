package nl.inl.blacklab.forwardindex;

import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * Quicky sort very large primitive integer array in parallel.
 *
 * We need this for determining global term sort order while opening very large integrated indexes.
 *
 * (derived from code generated by ChatGPT; changes include when the executor is initialized (every call instead of once)
 *  and using a custom primitive comparator instead of a standard Java one that will cause a lot of boxing/unboxing)
 */
public class ParallelIntSorter {

    private static final int THRESHOLD = 10000; // Minimum size of array to parallelize sorting

    private static final int NUM_THREADS = Runtime.getRuntime().availableProcessors(); // Number of threads to use

    private static ExecutorService executor; // Thread pool

    public static void parallelSort(int[] array, IntComparator comparator) {
        executor = Executors.newFixedThreadPool(NUM_THREADS); // Thread pool
        parallelSort(array, 0, array.length - 1, comparator);
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            // Handle exception
        }
    }

    interface IntComparator {
        int compare(int a, int b);
    }

    private static void parallelSort(int[] array, int left, int right, IntComparator comparator) {
        if (left < right) {
            int pivotIndex = partition(array, left, right, comparator);
            if (right - left + 1 < THRESHOLD) {
                // Sort sequentially for small arrays
                quicksort(array, left, pivotIndex - 1, comparator);
                quicksort(array, pivotIndex + 1, right, comparator);
            } else {
                // Sort left and right partitions in parallel using thread pool
                executor.submit(() -> parallelSort(array, left, pivotIndex - 1, comparator));
                executor.submit(() -> parallelSort(array, pivotIndex + 1, right, comparator));
            }
        }
    }

    private static int partition(int[] array, int left, int right, IntComparator comparator) {
        int pivotIndex = left + new Random().nextInt(right - left + 1);
        int pivotValue = array[pivotIndex];
        swap(array, pivotIndex, right);
        int storeIndex = left;
        for (int i = left; i < right; i++) {
            if (comparator.compare(array[i], pivotValue) <= 0) {
                swap(array, i, storeIndex);
                storeIndex++;
            }
        }
        swap(array, storeIndex, right);
        return storeIndex;
    }

    private static void quicksort(int[] array, int left, int right, IntComparator comparator) {
        if (left < right) {
            int pivotIndex = partition(array, left, right, comparator);
            quicksort(array, left, pivotIndex - 1, comparator);
            quicksort(array, pivotIndex + 1, right, comparator);
        }
    }

    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
